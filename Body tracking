void MainPage::InitKinect()
{
  KinectSensor^ sensor = KinectSensor::GetDefault();
  sensor->Open();
  bodyReader = sensor->BodyFrameSource->OpenReader();
  bodyReader->FrameArrived += 
   ref new TypedEventHandler<typename BodyFrameArrivedEventArgs^> (this,                 
                        &MainPage::OnBodyFrameArrived);
  bodies = ref new Platform::Collections::Vector<Body^>(6);
}

void MainPage::OnBodyFrameArrived(BodyFrameReader ^sender, BodyFrameArrivedEventArgs ^eventArgs){
  BodyFrame ^frame = eventArgs->FrameReference->AcquireFrame();
  if (frame != nullptr){
	  frame->GetAndRefreshBodyData(bodies);
  }
}
void MainPage::OnBodyFrameArrived(Platform::Object ^sender, 
                                  BodyFrameArrivedEventArgs ^eventArgs){
{
  BodyFrame ^frame = eventArgs->FrameReference->AcquireFrame();
  if (frame != nullptr)
  {
    frame->GetAndRefreshBodyData(bodies);	

    for each (Body ^body in bodies)
    {
      Joint headJoint = body->Joints->Lookup(JointType::Head);
      CameraSpacePoint headLocation = headJoint.Position;
      TrackingState headTrackingState = headJoint.TrackingState;
		
      CoordinateMapper ^mapper = 
        frame->BodyFrameSource->KinectSensor->CoordinateMapper;
      ColorSpacePoint headPoint = mapper->MapCameraPointToColorSpace(headLocation);
    }
  }
}
